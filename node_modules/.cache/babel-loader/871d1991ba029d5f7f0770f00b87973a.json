{"ast":null,"code":"var _jsxFileName = \"/Users/jpdeveloper/workspace/facerecognitionbrain/src/components/displayError/displayError.js\";\nimport React from \"react\";\nimport \"./displayError.css\";\n\nlet hid = () => {\n  document.getElementById(\"pop\").classList.toggle(\"close\");\n};\n\nlet show = ved => {\n  document.getElementById(ved).classList.toggle(\"show\");\n};\n\nclass DisplayError extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    }); // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Something went wrong.\"), React.createElement(\"details\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.state.error && this.state.error.toString(), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), this.state.errorInfo.componentStack));\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}\n\nexport default DisplayError;\n/**\nrender(){\n    let {title, text} = this.props;\n  return(\n    <div id=\"pop\" className=\"popup\">\n      <div className=\"innerPopup\" >\n\n    <article>\n            <h3> Title</h3>\n        <div>\n            <p>aaaaaaaaa</p>\n        </div>\n        <footer>\n          <p id=\"close\" onClick={hid} >x</p>\n        </footer>\n    </article>\n      </div>\n    </div>\n  )\n}\n}*/","map":{"version":3,"sources":["/Users/jpdeveloper/workspace/facerecognitionbrain/src/components/displayError/displayError.js"],"names":["React","hid","document","getElementById","classList","toggle","show","ved","DisplayError","Component","constructor","props","state","error","errorInfo","componentDidCatch","setState","render","whiteSpace","toString","componentStack","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;AAEA,IAAIC,GAAG,GAAE,MAAK;AACZC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EACGC,SADH,CAEGC,MAFH,CAEU,OAFV;AAGD,CAJD;;AAMA,IAAIC,IAAI,GAAGC,GAAD,IAAQ;AAChBL,EAAAA,QAAQ,CAACC,cAAT,CAAwBI,GAAxB,EACGH,SADH,CAEGC,MAFH,CAEU,MAFV;AAGD,CAJD;;AAMA,MAAMG,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,CAACF,KAAD,EAAQC,SAAR,EAAmB;AAClC;AACA,SAAKE,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAEA;AAFC,KAAd,EAFkC,CAMlC;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKL,KAAL,CAAWE,SAAf,EAA0B;AACxB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAS,QAAA,KAAK,EAAE;AAAEI,UAAAA,UAAU,EAAE;AAAd,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKN,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWC,KAAX,CAAiBM,QAAjB,EADvB,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGG,KAAKP,KAAL,CAAWE,SAAX,CAAqBM,cAHxB,CAFF,CADF;AAUD,KAbM,CAcP;;;AACA,WAAO,KAAKT,KAAL,CAAWU,QAAlB;AACD;;AA/BwC;;AAkC3C,eAAeb,YAAf;AAMA","sourcesContent":["import React from \"react\";\nimport \"./displayError.css\";\n\nlet hid =() =>{\n  document.getElementById(\"pop\")\n    .classList\n    .toggle(\"close\");\n}\n\nlet show =(ved) =>{\n  document.getElementById(ved)\n    .classList\n    .toggle(\"show\");\n}\n\nclass DisplayError extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    })\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default DisplayError;\n\n\n\n\n\n/**\nrender(){\n    let {title, text} = this.props;\n  return(\n    <div id=\"pop\" className=\"popup\">\n      <div className=\"innerPopup\" >\n\n    <article>\n            <h3> Title</h3>\n        <div>\n            <p>aaaaaaaaa</p>\n        </div>\n        <footer>\n          <p id=\"close\" onClick={hid} >x</p>\n        </footer>\n    </article>\n      </div>\n    </div>\n  )\n}\n}*/\n"]},"metadata":{},"sourceType":"module"}